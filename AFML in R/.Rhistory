rf_model <- randomForest(x = train_features, y = as.factor(train_target), ntree = 100)
# Create feature matrix for testing
test_features <- data.frame(SMA = sma_signals_test, RSI = rsi_signals_test, BBands = bbands_signals_test, CUSUM = cusum_signals_test)
# Make predictions
predictions <- predict(rf_model, test_features)
# Simulate returns based on predictions
test_prices <- as.numeric(test_prices)
returns <- numeric(length(predictions) - 1)
for (i in 1:(length(predictions) - 1)) {
if (predictions[i] == 1) {
entry_price <- test_prices[i]
exit_price <- test_prices[i + 1]
returns[i] <- (exit_price - entry_price) / entry_price
}
}
# Calculate cumulative return
cumulative_return <- prod(1 + returns, na.rm = TRUE) - 1
cat("Cumulative Return over the test set: ", cumulative_return * 100, "%\n")
# Plot signals
plot(test_prices, type = "l", main = "Random Forest Buy/Sell Signals", xlab = "Date", ylab = "Price")
buy_signals <- which(predictions == 1)
sell_signals <- which(predictions == 0)
points(buy_signals, test_prices[buy_signals], col = "green", pch = 19)
points(sell_signals, test_prices[sell_signals], col = "red", pch = 19)
# Plot cumulative returns
cumulative_returns <- cumprod(1 + returns) - 1
plot(seq_along(cumulative_returns), cumulative_returns, type = "l", col = "blue", lwd = 2,
main = "Cumulative Returns of Random Forest Strategy", xlab = "Time", ylab = "Cumulative Return")
# Load necessary libraries
library(MASS)
# Step 1: Estimate input parameters {sigma, phi}
estimate_parameters <- function(prices, E0) {
I <- ncol(prices)
T_max <- nrow(prices)
X <- matrix(nrow = (T_max - 1) * I, ncol = 1)
Y <- matrix(nrow = (T_max - 1) * I, ncol = 1)
idx <- 1
for (i in 1:I) {
for (t in 1:(T_max - 1)) {
X[idx] <- prices[t, i] - E0[i]
Y[idx] <- prices[t + 1, i]
idx <- idx + 1
}
}
phi_hat <- cov(Y, X) / cov(X, X)
Z <- matrix(E0, nrow = (T_max - 1) * I, ncol = 1, byrow = TRUE)
residuals <- Y - Z - phi_hat * X
sigma_hat <- sqrt(var(residuals))
return(list(sigma = sigma_hat, phi = phi_hat))
}
# Step 2: Construct mesh of stop-loss and profit-taking pairs
construct_mesh <- function(sigma) {
pi <- seq(-12 * sigma, -sigma, length.out = 10)
pi_bar <- seq(sigma, 12 * sigma, length.out = 10)
mesh <- expand.grid(pi, pi_bar)
colnames(mesh) <- c("pi", "pi_bar")
return(mesh)
}
# Step 3: Generate paths
generate_paths <- function(N, T_max, sigma, phi, initial_price, E0) {
paths <- matrix(nrow = N, ncol = T_max)
for (i in 1:N) {
paths[i, 1] <- initial_price
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
}
return(paths)
}
# Step 4: Apply stop-loss and profit-taking logic
apply_trading_logic <- function(paths, mesh, T_max) {
N <- nrow(paths)
results <- data.frame(pi = numeric(), pi_bar = numeric(), sharpe_ratio = numeric())
for (i in 1:nrow(mesh)) {
pi <- mesh$pi[i]
pi_bar <- mesh$pi_bar[i]
final_pnl <- numeric(N)
for (j in 1:N) {
for (t in 1:T_max) {
pnl <- paths[j, t] - paths[j, 1]
if (pnl <= pi || pnl >= pi_bar) {
final_pnl[j] <- pnl
break
}
if (t == T_max) {
final_pnl[j] <- pnl
}
}
}
sharpe_ratio <- mean(final_pnl) / sd(final_pnl)
results <- rbind(results, data.frame(pi = pi, pi_bar = pi_bar, sharpe_ratio = sharpe_ratio))
}
return(results)
}
# Step 5: Determine optimal trading rule
determine_optimal_rule <- function(results) {
optimal_rule <- results[which.max(results$sharpe_ratio), ]
return(optimal_rule)
}
# Example usage
# Define input data
prices <- matrix(c(100, 101, 102, 99, 100, 98, 97, 100, 101, 105, 104, 102, 100, 99, 98, 97), nrow = 4, ncol = 4, byrow = TRUE)
prices
E0 <- colMeans(prices)
E0
# Step 1: Estimate parameters
params <- estimate_parameters(prices, E0)
# Load necessary libraries
library(MASS)
# Step 1: Estimate input parameters {sigma, phi}
estimate_parameters <- function(prices, E0) {
I <- ncol(prices)
T_max <- nrow(prices)
X <- matrix(nrow = (T_max - 1) * I, ncol = 1)
Y <- matrix(nrow = (T_max - 1) * I, ncol = 1)
idx <- 1
for (i in 1:I) {
for (t in 1:(T_max - 1)) {
X[idx] <- prices[t, i] - E0[i]
Y[idx] <- prices[t + 1, i]
idx <- idx + 1
}
}
phi_hat <- cov(Y, X) / cov(X, X)
Z <- matrix(E0, nrow = (T_max - 1) * I, ncol = 1, byrow = TRUE)
residuals <- Y - Z - phi_hat * X
sigma_hat <- sqrt(var(residuals))
return(list(sigma = sigma_hat, phi = phi_hat))
}
# Step 2: Construct mesh of stop-loss and profit-taking pairs
construct_mesh <- function(sigma) {
pi <- seq(-12 * sigma, -sigma, length.out = 10)
pi_bar <- seq(sigma, 12 * sigma, length.out = 10)
mesh <- expand.grid(pi, pi_bar)
colnames(mesh) <- c("pi", "pi_bar")
return(mesh)
}
# Step 3: Generate paths
generate_paths <- function(N, T_max, sigma, phi, initial_price, E0) {
paths <- matrix(nrow = N, ncol = T_max)
for (i in 1:N) {
paths[i, 1] <- initial_price
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
}
return(paths)
}
# Step 4: Apply stop-loss and profit-taking logic
apply_trading_logic <- function(paths, mesh, T_max) {
N <- nrow(paths)
results <- data.frame(pi = numeric(), pi_bar = numeric(), sharpe_ratio = numeric())
for (i in 1:nrow(mesh)) {
pi <- mesh$pi[i]
pi_bar <- mesh$pi_bar[i]
final_pnl <- numeric(N)
for (j in 1:N) {
for (t in 1:T_max) {
pnl <- paths[j, t] - paths[j, 1]
if (pnl <= pi || pnl >= pi_bar) {
final_pnl[j] <- pnl
break
}
if (t == T_max) {
final_pnl[j] <- pnl
}
}
}
sharpe_ratio <- mean(final_pnl) / sd(final_pnl)
results <- rbind(results, data.frame(pi = pi, pi_bar = pi_bar, sharpe_ratio = sharpe_ratio))
}
return(results)
}
# Step 5: Determine optimal trading rule
determine_optimal_rule <- function(results) {
optimal_rule <- results[which.max(results$sharpe_ratio), ]
return(optimal_rule)
}
# Step 1: Estimate parameters
params <- estimate_parameters(prices, E0)
# Example usage
# Define input data
prices <- matrix(c(100, 101, 102, 99, 100, 98, 97, 100, 101, 105, 104, 102, 100, 99, 98, 97), nrow = 4, ncol = 4, byrow = TRUE)
E0 <- colMeans(prices)
# Step 1: Estimate parameters
params <- estimate_parameters(prices, E0)
I <- ncol(prices)
T_max <- nrow(prices)
I
T_max <- nrow(prices)
T_max
X <- matrix(nrow = (T_max - 1) * I, ncol = 1)
Y <- matrix(nrow = (T_max - 1) * I, ncol = 1)
X
Y
idx <- 1
for (i in 1:I) {
for (t in 1:(T_max - 1)) {
X[idx] <- prices[t, i] - E0[i]
Y[idx] <- prices[t + 1, i]
idx <- idx + 1
}
}
Y
X
cov(Y, X)
cov(X, X)
phi_hat <- cov(Y, X) / cov(X, X)
phi_hat
Z <- matrix(E0, nrow = (T_max - 1) * I, ncol = 1, byrow = TRUE)
Z
residuals <- Y - Z - phi_hat * X
Y
Z
Y - Z
Y - Z - phi_hat
phi_hat
X
phi_hat * X
phi_hat
residuals <- Y - Z - phi_hat * X
cov(Y, X)
phi_hat <- as.vector(cov(Y, X) / cov(X, X))
Z <- matrix(E0, nrow = (T_max - 1) * I, ncol = 1, byrow = TRUE)
residuals <- Y - Z - phi_hat * X
residuals
sigma_hat <- sqrt(var(residuals))
sigma_hat
phi_hat
# Step 1: Estimate input parameters {sigma, phi}
estimate_parameters <- function(prices, E0) {
I <- ncol(prices)
T_max <- nrow(prices)
X <- matrix(nrow = (T_max - 1) * I, ncol = 1)
Y <- matrix(nrow = (T_max - 1) * I, ncol = 1)
idx <- 1
for (i in 1:I) {
for (t in 1:(T_max - 1)) {
X[idx] <- prices[t, i] - E0[i]
Y[idx] <- prices[t + 1, i]
idx <- idx + 1
}
}
phi_hat <- as.vector(cov(Y, X) / cov(X, X))
Z <- matrix(E0, nrow = (T_max - 1) * I, ncol = 1, byrow = TRUE)
residuals <- Y - Z - phi_hat * X
sigma_hat <- sqrt(var(residuals))
return(list(sigma = sigma_hat, phi = phi_hat))
}
# Step 1: Estimate parameters
params <- estimate_parameters(prices, E0)
params
sigma_hat <- params$sigma
phi_hat <- params$phi
# Step 2: Construct mesh
mesh <- construct_mesh(sigma_hat)
mesh
# Step 3: Generate paths
N <- 100000
T_max <- 100
initial_price <- prices[1, ]
paths <- generate_paths(N, T_max, sigma_hat, phi_hat, initial_price, E0)
N
T_max
sigma
phi
paths <- matrix(nrow = N, ncol = T_max)
paths
T_max
N
i<-1
initial_price
aths[i, 1]
paths[i, 1] <- initial_price
generate_paths <- function(N, T_max, sigma, phi, initial_prices, E0) {
paths <- matrix(nrow = N, ncol = T_max)
for (i in 1:N) {
paths[i, 1] <- initial_prices[i]  # Assign each path its initial price
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
}
return(paths)
}
paths <- generate_paths(N, T_max, sigma_hat, phi_hat, initial_price, E0)
generate_paths <- function(N, T_max, sigma, phi, initial_prices, E0) {
paths <- matrix(nrow = N, ncol = T_max)
for (i in 1:N) {
paths[i, 1] <- initial_prices[i]  # Assign each path its initial price
for (t in 2:T_max) {
paths[i, t] <- E0[i] + phi * (paths[i, t - 1] - E0[i]) + rnorm(1, mean = 0, sd = sigma)
}
}
return(paths)
}
paths <- generate_paths(N, T_max, sigma_hat, phi_hat, initial_price, E0)
paths
# Get Bitcoin historical data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2020-01-01", to = Sys.Date())
prices <- `BTC-USD`$`BTC-USD.Close`
# Interpolate NA values
prices <- na.approx(prices)
library(quantmod)
# Get Bitcoin historical data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2020-01-01", to = Sys.Date())
prices <- `BTC-USD`$`BTC-USD.Close`
# Interpolate NA values
prices <- na.approx(prices)
# Step 1: Estimate input parameters {sigma, phi}
estimate_parameters <- function(prices, E0) {
I <- ncol(prices)
T_max <- nrow(prices)
X <- matrix(nrow = (T_max - 1) * I, ncol = 1)
Y <- matrix(nrow = (T_max - 1) * I, ncol = 1)
idx <- 1
for (i in 1:I) {
for (t in 1:(T_max - 1)) {
X[idx] <- prices[t, i] - E0[i]
Y[idx] <- prices[t + 1, i]
idx <- idx + 1
}
}
phi_hat <- as.vector(cov(Y, X) / cov(X, X))
Z <- matrix(E0, nrow = (T_max - 1) * I, ncol = 1, byrow = TRUE)
residuals <- Y - Z - phi_hat * X
sigma_hat <- sqrt(var(residuals))
return(list(sigma = sigma_hat, phi = phi_hat))
}
# Step 2: Construct mesh of stop-loss and profit-taking pairs
construct_mesh <- function(sigma) {
pi <- seq(-12 * sigma, -sigma, length.out = 10)
pi_bar <- seq(sigma, 12 * sigma, length.out = 10)
mesh <- expand.grid(pi, pi_bar)
colnames(mesh) <- c("pi", "pi_bar")
return(mesh)
}
# Step 3: Generate paths
generate_paths <- function(N, T_max, sigma, phi, initial_prices, E0) {
paths <- matrix(nrow = N, ncol = T_max)
for (i in 1:N) {
paths[i, 1] <- initial_prices[i]  # Assign each path its initial price
for (t in 2:T_max) {
paths[i, t] <- E0[i] + phi * (paths[i, t - 1] - E0[i]) + rnorm(1, mean = 0, sd = sigma)
}
}
return(paths)
}
# Step 4: Apply stop-loss and profit-taking logic
apply_trading_logic <- function(paths, mesh, T_max) {
N <- nrow(paths)
results <- data.frame(pi = numeric(), pi_bar = numeric(), sharpe_ratio = numeric())
for (i in 1:nrow(mesh)) {
pi <- mesh$pi[i]
pi_bar <- mesh$pi_bar[i]
final_pnl <- numeric(N)
for (j in 1:N) {
for (t in 1:T_max) {
pnl <- paths[j, t] - paths[j, 1]
if (pnl <= pi || pnl >= pi_bar) {
final_pnl[j] <- pnl
break
}
if (t == T_max) {
final_pnl[j] <- pnl
}
}
}
sharpe_ratio <- mean(final_pnl) / sd(final_pnl)
results <- rbind(results, data.frame(pi = pi, pi_bar = pi_bar, sharpe_ratio = sharpe_ratio))
}
return(results)
}
# Step 5: Determine optimal trading rule
determine_optimal_rule <- function(results) {
optimal_rule <- results[which.max(results$sharpe_ratio), ]
return(optimal_rule)
}
# Example usage
# Define input data
prices <- matrix(c(100, 101, 102, 99, 100, 98, 97, 100, 101, 105, 104, 102, 100, 99, 98, 97), nrow = 4, ncol = 4, byrow = TRUE)
E0 <- colMeans(prices)
# Step 1: Estimate parameters
params <- estimate_parameters(prices, E0)
sigma_hat <- params$sigma
phi_hat <- params$phi
# Step 2: Construct mesh
mesh <- construct_mesh(sigma_hat)
prices <- `BTC-USD`$`BTC-USD.Close`
# Interpolate NA values
prices <- na.approx(prices)
# Example usage
# Define input data
E0 <- mean(prices)
E0
# Step 1: Estimate parameters
params <- estimate_parameters(prices, E0)
sigma_hat <- params$sigma
phi_hat <- params$phi
sigma_hat
phi_hat
# Step 2: Construct mesh
mesh <- construct_mesh(sigma_hat)
mesh
# Step 3: Generate paths
N <- 100000
T_max <- 100
initial_price <- prices[1, ]
paths <- generate_paths(N, T_max, sigma_hat, phi_hat, initial_price, E0)
initial_price
initial_price <- as.vector(prices[1, ])
initial_price
paths <- generate_paths(N, T_max, sigma_hat, phi_hat, initial_price, E0)
# Step 4: Apply trading logic
results <- apply_trading_logic(paths, mesh, T_max)
paths
paths <- matrix(nrow = N, ncol = T_max)
i
paths[i, 1] <- initial_price
paths
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
phi<-phi_hat
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
sigma<-sigma_hat
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
paths
generate_paths <- function(N, T_max, sigma, phi, initial_price, E0) {
paths <- matrix(nrow = N, ncol = T_max)
for (i in 1:N) {
paths[i, 1] <- initial_price
for (t in 2:T_max) {
paths[i, t] <- E0 + phi * (paths[i, t - 1] - E0) + rnorm(1, mean = 0, sd = sigma)
}
}
return(paths)
}
paths <- generate_paths(N, T_max, sigma_hat, phi_hat, initial_price, E0)
paths
# Step 4: Apply trading logic
results <- apply_trading_logic(paths, mesh, T_max)
results
# Step 5: Determine optimal rule
optimal_rule <- determine_optimal_rule(results)
print(optimal_rule)
contour(results$pi,results$pi_bar,results$sharpe_ratio)
order(results$pi)
order(results$pi,results$pi_bar)
i<-order(results$pi,results$pi_bar)
contour(results$pi[i],results$pi_bar[i],results$sharpe_ratio[i])
results$pi
ggplot(results, aes(x = pi, y = pi_bar, z = sharpe_ratio)) +
geom_contour_filled() +
scale_fill_viridis_c() +
labs(
title = "Contour Plot of Sharpe Ratio",
x = expression(pi),
y = expression(pi_bar),
fill = "Sharpe Ratio"
) +
theme_minimal()
ggplot(results, aes(x = pi, y = pi_bar, z = sharpe_ratio)) +
geom_contour_filled() +
scale_fill_viridis_c() +
labs(
title = "Contour Plot of Sharpe Ratio",
x = expression(pi),
y = expression(pi_bar),
fill = "Sharpe Ratio"
) +
theme_minimal()
ggplot(results, aes(x = pi, y = pi_bar, z = sharpe_ratio)) +
geom_contour_filled() +
labs(
title = "Contour Plot of Sharpe Ratio",
x = expression(pi),
y = expression(pi_bar),
fill = "Sharpe Ratio"
) +
theme_minimal()
library(e1071)
library(caret)
#Cargamos el dataset
data(infert, package ="datasets")
library("infert")
View(infert)
View(infert)
#Cargamos el dataset
data(infert, package ="datasets")
#Revisamos información sobre los tipos de datos
str(infert)
#Convertimos variables predictoras que sean categóricas en factores
infert$induced
infert$spontaneous
install.packages("e1071")
library(e1071)
data(infert)
infert$spontaneous <- as.factor(infert$spontaneous)
set.seed(123) # For reproducibility
sample_index <- sample(seq_len(nrow(infert)), size = 0.7 * nrow(infert))
train_data <- infert[sample_index, ]
test_data <- infert[-sample_index, ]
model <- naiveBayes(spontaneous ~ ., data = train_data)
predictions <- predict(model, test_data)
caret::confusionMatrix(test_data$spontaneous,predictions)
