# Plot the alignment
dtwPlotTwoWay(alignment,dax,ftse)
1500:length(stock_data$DAX)
# Select two time series (DAX and FTSE) for comparison
dax <- stock_data$DAX[1500:length(stock_data$DAX)]
ftse <- stock_data$FTSE[1500:length(stock_data$DAX)]
alignment <- dtw(dax, ftse,keep.internals = T)
# Print the DTW distance
cat("DTW Distance:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,dax,ftse)
dtwPlotDensity(alignment)
plot(alignment)
library(WaveletComp)
install.packages("WaveletComp")
library(WaveletComp)
data("EuStockMarkets")
stock_data <- as.data.frame(EuStockMarkets)
dax <- stock_data$DAX
dax_wavelet <- analyze.wavelet(list(dax = dax), "dax", loess.span = 0)
dax
analyze.wavelet(list(dax = dax), "dax", loess.span = 0)
dax_wavelet <- analyze.wavelet(dax, "dax", loess.span = 0)
dax
my.date <- seq(as.POSIXct("2014-10-14 00:00:00", format = "%F %T"),
by = "hour",
length.out = length(dax))
my.data <- data.frame(date = my.date, x = dax)
dax_wavelet <- analyze.wavelet(dax, "dax", loess.span = 0)
dax_wavelet <- analyze.wavelet(my.data, "dax", loess.span = 0)
my.data
my.data <- data.frame(date = my.date, dax = dax)
dax_wavelet <- analyze.wavelet(my.data, "dax", loess.span = 0)
wt.image(dax_wavelet, main = "Wavelet Power Spectrum of DAX")
wt.avg(dax_wavelet, main = "Time-Averaged Wavelet Power Spectrum of DAX")
#install.packages("quantmod")
#install.packages("WaveletComp")
library(quantmod)
library(WaveletComp)
install.packages("quantmod")
# Get Bitcoin price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2014-01-01", to = "2024-01-01")
#install.packages("quantmod")
#install.packages("WaveletComp")
library(quantmod)
# Get Bitcoin price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2014-01-01", to = "2024-01-01")
# Extract the closing prices
btc_prices <- Cl(`BTC-USD`)
# Convert to data frame
btc_df <- data.frame(date = index(btc_prices), price = coredata(btc_prices))
# Perform wavelet transform
btc_wavelet <- analyze.wavelet(btc_df, my.series = "price", loess.span = 0)
btc_df
coredata(btc_prices)
btc_prices
as.vector(btc_prices)
# Convert to data frame
btc_df <- data.frame(date = index(btc_prices), price = as.vector(btc_prices))
# Perform wavelet transform
btc_wavelet <- analyze.wavelet(btc_df, my.series = "price", loess.span = 0)
# Plot wavelet power spectrum
wt.image(btc_wavelet, main = "Wavelet Power Spectrum of Bitcoin Prices")
# Plot the time-averaged power spectrum
wt.avg(btc_wavelet, main = "Time-Averaged Wavelet Power Spectrum of Bitcoin Prices")
# Plot wavelet power spectrum
wt.image(btc_wavelet, main = "Wavelet Power Spectrum of Bitcoin Prices")
halving_dates <- as.Date(c("2012-11-28", "2016-07-09", "2020-05-11"))
abline(v = as.numeric(halving_dates), col = "red", lty = 2, lwd = 2)
abline(v = 1500, col = "red", lty = 2, lwd = 2)
abline(v = 1500, col = "red", lty = 2, lwd = 2)
abline(h = 1500, col = "red", lty = 2, lwd = 2)
btc_prices
btc_prices[1000:1500]
btc_prices[1200]
# install.packages("quantmod")
# install.packages("dtw")
library(quantmod)
library(dtw)
# Get Bitcoin and Ethereum price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2016-01-01", to = "2024-01-01")
getSymbols("ETH-USD", src = "yahoo", from = "2016-01-01", to = "2024-01-01")
# Extract the closing prices
btc_prices <- Cl(`BTC-USD`)
eth_prices <- Cl(`ETH-USD`)
# Align the time series by merging them
merged_prices <- merge(btc_prices, eth_prices, all = FALSE)
# Extract aligned series
btc_aligned <- merged_prices[, 1]
eth_aligned <- merged_prices[, 2]
btc_aligned
merged_prices
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned)
# Plot the alignment
plot(alignment, type = "two", col = "blue", main = "DTW Alignment between BTC and ETH")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
btc_aligned
eth_aligned
# Extract aligned series
btc_aligned <- merged_prices[, 1] / mean(merged_prices[, 1])
eth_aligned <- merged_prices[, 2] / mean(merged_prices[, 2])
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned)
# Print the DTW distance
cat("DTW Distance:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "blue", main = "Bitcoin (BTC) Price", ylab = "Price (USD)", xlab = "Date")
plot(index(eth_aligned), eth_aligned, type = "l", col = "green", main = "Ethereum (ETH) Price", ylab = "Price (USD)", xlab = "Date")
par(mfrow = c(1, 1))  # Reset plot window
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "blue", main = "Bitcoin (BTC) Price", ylab = "Price (USD)", xlab = "Date")
plot(index(eth_aligned), eth_aligned, type = "l", col = "green", main = "Ethereum (ETH) Price", ylab = "Price (USD)", xlab = "Date")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
par(mfrow = c(1, 1))  # Reset plot window
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Calculate daily returns
btc_returns <- dailyReturn(btc_prices)
eth_returns <- dailyReturn(eth_prices)
# Align the time series by merging them
merged_returns <- merge(btc_returns, eth_returns, all = FALSE)
btc_aligned <- merged_returns[, 1]
eth_aligned <- merged_returns[, 2]
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned)
# Print the DTW distance
cat("DTW Distance:", alignment$distance, "\n")
# Print the DTW distance
cat("DTW Distance:", alignment$distance, "\n")
# Plot the alignment
plot(alignment, type = "two", col = "blue", main = "DTW Alignment between BTC and ETH Returns")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned, type = "two", col = "blue", main = "DTW Alignment between BTC and ETH Returns")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "blue", main = "Bitcoin (BTC) Returns", ylab = "Returns", xlab = "Date")
plot(index(eth_aligned), eth_aligned, type = "l", col = "green", main = "Ethereum (ETH) Returns", ylab = "Returns", xlab = "Date")
par(mfrow = c(1, 1))  # Reset plot window
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Print the DTW distance
cat("DTW Distance:", alignment$distance, "\n")
lagged_btc <- lag(btc_returns, k = 1:30)
lagged_btc
combined_data <- merge(lagged_btc, eth_returns, all = FALSE)
combined_data
eth_returns
combined_data
dim(combined_data)
dim(lagged_btc)
eth_returns
combined_data <- na.omit(combined_data)
features <- combined_data[, 1:30]
target <- combined_data[, 31]
target
train_data <- data.frame(features, target)
train_data
train_data <- data.frame(features, target = as.vectro(target))
train_data <- data.frame(features, target = as.vector(target))
model <- train(target ~ ., data = train_data, method = "lm")
train_data <- data.frame(features, target = as.vector(target))
library(caret)
install.packages("caret")
model <- train(target ~ ., data = train_data, method = "lm")
library(caret)
model <- train(target ~ ., data = train_data, method = "lm")
# Get the last 30 days of BTC returns
last_30_days_btc <- tail(btc_returns, 30)
# Predict the next day's ETH return
predicted_eth_return <- predict(model, as.data.frame(t(last_30_days_btc)))
predicted_eth_return
model
last_30_days_btc
as.data.frame(t(last_30_days_btc))
as.data.frame((last_30_days_btc))
test_df<-as.data.frame(t(last_30_days_btc))
features
features
colnames(features)
colnames(test_df)<-colnames(features)
# Predict the next day's ETH return
predicted_eth_return <- predict(model, as.data.frame(t(last_30_days_btc)))
# Predict the next day's ETH return
predicted_eth_return <- predict(model, test_df)
predicted_eth_return
# Print the predicted ETH return
cat("Predicted ETH Return:", predicted_eth_return, "\n")
eth_returns
# Print the predicted ETH return
cat("Predicted ETH Return:", predicted_eth_return, "\n")
model
target
summary(target)
quantile(target)
target <- cut(combined_data[, 31], breaks = c(-Inf, -0.02, 0.02, Inf), labels = c("Low", "Medium", "High"))
target
quantile(target)
target
#quantile(target)
train_data <- data.frame(features, target = as.vector(target))
model <- train(target ~ ., data = train_data, method = "rf")
model <- train(target ~ ., data = train_data, method = "rf")
model
plot(model)
# Get the last 30 days of BTC returns
last_30_days_btc <- tail(btc_returns, 30)
test_df<-as.data.frame(t(last_30_days_btc))
colnames(test_df)<-colnames(features)
# Predict the next day's ETH return
predicted_eth_return <- predict(model, test_df)
# Print the predicted ETH return
cat("Predicted ETH Return:", predicted_eth_return, "\n")
eth_returns
model
# Print the predicted ETH return
cat("Predicted ETH Return:", predicted_eth_return, "\n")
eth_returns
confusionMatrix(target)
target
summary(model)
(model)
predict(model,train)
train
train_data
predict(model,train_data)
target
predict(model,train_data)
predict(model, test_df)
confusionMatrix(target,predict(model,train_data))
x<-runif(100)
mean(x)
set.seed(42)
x<-runif(100)
mean(x)
set.seed(42)
x<-runif(10)
mean(x)
sample(x,10,replace = T)
sample(x,10,replace = T)
sample(x,10,replace = T)
mean(sample(x,10,replace = T))
bs_mean <- replicate(10000,mean(sample(x,10,replace = T)),simplify = T)
bs_mean
bs_mean>.5
mean(bs_mean>.5)
library(boot)
# Step 1: Generate a sample from a uniform distribution
set.seed(123) # For reproducibility
sample_size <- 100
uniform_sample <- runif(sample_size, min = 0, max = 1)
uniform_sample
# Step 2: Define a function to calculate the maximum
max_stat <- function(data, indices) {
return(max(data[indices]))
}
max_stat
# Step 3: Perform bootstrapping
# Number of bootstrap samples
bootstrap_samples <- 1000
# Apply the boot function
boot_results <- boot(data = uniform_sample, statistic = max_stat, R = bootstrap_samples)
# Step 4: Calculate the confidence interval
# 95% CI using the percentile method
ci <- boot.ci(boot_results, type = "perc")
ci
# Print the results
cat("Bootstrap Confidence Interval for the maximum of a uniform distribution:\n")
print(ci)
# Plot the bootstrap distribution
plot(boot_results)
max(uniform_sample)
sample_size <- 10
uniform_sample <- runif(sample_size, min = 0, max = 1)
# Step 2: Define a function to calculate the maximum
max_stat <- function(data, indices) {
return(max(data[indices]))
}
# Step 3: Perform bootstrapping
# Number of bootstrap samples
bootstrap_samples <- 1000
# Apply the boot function
boot_results <- boot(data = uniform_sample, statistic = max_stat, R = bootstrap_samples)
# Step 4: Calculate the confidence interval
# 95% CI using the percentile method
ci <- boot.ci(boot_results, type = "perc")
# Print the results
cat("Bootstrap Confidence Interval for the maximum of a uniform distribution:\n")
print(ci)
# Plot the bootstrap distribution
plot(boot_results)
max(uniform_sample)
# install.packages("quantmod")
# install.packages("dtw")
library(quantmod)
library(dtw)
library(caret)
# Get Bitcoin and Ethereum price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2016-01-01", to = "2024-01-01")
getSymbols("ETH-USD", src = "yahoo", from = "2016-01-01", to = "2024-01-01")
# Calculate daily returns
btc_returns <- dailyReturn(btc_prices)
eth_returns <- dailyReturn(eth_prices)
# Align the time series by merging them
merged_returns <- merge(btc_returns, eth_returns, all = FALSE)
btc_aligned <- merged_returns[, 1]
eth_aligned <- merged_returns[, 2]
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned)
# Print the DTW distance
cat("DTW Distance:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "blue", main = "Bitcoin (BTC) Returns", ylab = "Returns", xlab = "Date")
plot(index(eth_aligned), eth_aligned, type = "l", col = "green", main = "Ethereum (ETH) Returns", ylab = "Returns", xlab = "Date")
par(mfrow = c(1, 1))  # Reset plot window
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "steelblue", main = "Retornos Bitcoin (BTC)", ylab = "Retornos", xlab = "Fecha")
plot(index(eth_aligned), eth_aligned, type = "l", col = "orange", main = "Retornos Ethereum (ETH)", ylab = "Retornos", xlab = "Fecha")
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba")
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=45)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "steelblue", main = "Retornos Bitcoin (BTC)", ylab = "Retornos", xlab = "Fecha")
plot(index(eth_aligned), eth_aligned, type = "l", col = "orange", main = "Retornos Ethereum (ETH)", ylab = "Retornos", xlab = "Fecha")
par(mfrow = c(1, 1))  # Reset plot window
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Get Bitcoin and Ethereum price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2024-01-01", to = "2024-01-01")
getSymbols("ETH-USD", src = "yahoo", from = "2024-01-01", to = "2024-01-01")
# Calculate daily returns
btc_returns <- Cl(btc_prices)
# Calculate daily returns
btc_prices <- Cl(`BTC-USD`)
eth_prices <- Cl(`ETH-USD`)
# Align the time series by merging them
merged_returns <- merge(btc_prices, eth_prices, all = FALSE)
merged_returns
# Get Bitcoin and Ethereum price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2024-01-01", to = "2024-07-31")
getSymbols("ETH-USD", src = "yahoo", from = "2024-01-01", to = "2024-07-31")
# Calculate daily returns
btc_prices <- Cl(`BTC-USD`)
eth_prices <- Cl(`ETH-USD`)
# Align the time series by merging them
merged_returns <- merge(btc_prices, eth_prices, all = FALSE)
btc_aligned <- merged_returns[, 1]
eth_aligned <- merged_returns[, 2]
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=45)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
btc_aligned <- merged_returns[, 1] / mean(merged_returns[, 1])
eth_aligned <- merged_returns[, 2] / mean(merged_returns[, 1])
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=45)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
btc_aligned <- merged_returns[, 1] / mean(merged_returns[, 1])
eth_aligned <- merged_returns[, 2] / mean(merged_returns[, 2])
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=45)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=15)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "steelblue", main = "Precio Bitcoin (BTC)", ylab = "Precio Normalizado", xlab = "Fecha")
plot(index(eth_aligned), eth_aligned, type = "l", col = "orange", main = "Precio Ethereum (ETH)", ylab = "Precio Normalizado", xlab = "Fecha")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
par(mfrow = c(1, 1))  # Reset plot window
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Plot wavelet power spectrum
wt.image(btc_wavelet, main = "Wavelet Power Spectrum of Bitcoin Prices")
library(quantmod)
library(WaveletComp)
# Get Bitcoin price data from Yahoo Finance
getSymbols("YPFD.BA", src = "yahoo", from = "2014-01-01", to = "2024-01-01")
# Extract the closing prices
btc_prices <- Cl(`BTC-USD`)
# Convert to data frame
btc_df <- data.frame(date = index(btc_prices), price = as.vector(btc_prices))
# Perform wavelet transform
btc_wavelet <- analyze.wavelet(btc_df, my.series = "price", loess.span = 0)
# Plot wavelet power spectrum
wt.image(btc_wavelet, main = "Wavelet Power Spectrum of Bitcoin Prices")
index(btc_prices)
# Get Bitcoin price data from Yahoo Finance
getSymbols("YPFD.BA", src = "yahoo", from = "2014-01-01", to = "2024-01-01")
# Extract the closing prices
btc_prices <- Cl(`BTC-USD`)
btc_prices
# Get Bitcoin price data from Yahoo Finance
getSymbols("YPFD.BA", src = "yahoo", from = "2014-01-01", to = "2024-01-01")
# Extract the closing prices
ypf_ba <- Cl(`YPFD.BA`)
index(ypf_ba)
as.vector(ypf_ba)
# Convert to data frame
ypf_df <- data.frame(date = index(ypf_ba), price = as.vector(ypf_ba))
# Perform wavelet transform
ypf_wavelet <- analyze.wavelet(ypf_df, my.series = "price", loess.span = 0)
# Plot wavelet power spectrum
wt.image(ypf_wavelet, main = "Espectro de Potencia de YPF")
# Perform wavelet transform
ypf_wavelet <- analyze.wavelet(ypf_df, my.series = "price", loess.span = 0)
is.na(ypf_ba)
ypf_ba[!is.na(ypf_ba)]
ypf_ba<-ypf_ba[!is.na(ypf_ba)]
# Convert to data frame
ypf_df <- data.frame(date = index(ypf_ba), price = as.vector(ypf_ba))
# Perform wavelet transform
ypf_wavelet <- analyze.wavelet(ypf_df, my.series = "price", loess.span = 0)
# Plot wavelet power spectrum
wt.image(ypf_wavelet, main = "Espectro de Potencia de YPF")
# Plot wavelet power spectrum
wt.image(ypf_wavelet, main = "Espectro de Potencia de YPF")
# Get Bitcoin and Ethereum price data from Yahoo Finance
getSymbols("BTC-USD", src = "yahoo", from = "2024-01-01", to = "2024-07-31")
getSymbols("ETH-USD", src = "yahoo", from = "2024-01-01", to = "2024-07-31")
# Calculate daily returns
btc_prices <- Cl(`BTC-USD`)
eth_prices <- Cl(`ETH-USD`)
# Align the time series by merging them
merged_returns <- merge(btc_prices, eth_prices, all = FALSE)
btc_aligned <- merged_returns[, 1] / mean(merged_returns[, 1])
eth_aligned <- merged_returns[, 2] / mean(merged_returns[, 2])
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=15)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned,window.type = "sakoechiba",window.size=15)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Perform DTW
alignment <- dtw(btc_aligned, eth_aligned)
# Print the DTW distance
cat("Distancia DTW:", alignment$distance, "\n")
# Plot the alignment
dtwPlotTwoWay(alignment,btc_aligned,eth_aligned)
# Optional: Plot the original time series
par(mfrow = c(2, 1))  # Split the plot window
plot(index(btc_aligned), btc_aligned, type = "l", col = "steelblue", main = "Precio Bitcoin (BTC)", ylab = "Precio Normalizado", xlab = "Fecha")
puntos <- read.csv("~/Downloads/plot-data.csv")
View(puntos)
plot(puntos$x,puntos$y)
plot(puntos$x, puntos$y, type = "n")  # 'type = "n"' creates the plot without points
# Add text labels for each point
text(puntos$x, puntos$y, labels = 1:nrow(puntos), cex = 0.7, pos = 4)
max<-puntos[c(1,11,10,12,13,14,25,15,24,16),]
min<-puntos[c(1,17,18,19,20,21,22,27,23,28),]
media<-puntos[c(1,2,3,4,5,6,7,26,8,9)]
media<-puntos[c(1,2,3,4,5,6,7,26,8,9),]
plot(max)
fit_max<-loess(max$y~max$x)
smoothed_values <- predict(loess_model)
fit_max<-loess(max$y~max$x)
smoothed_values <- predict(fit_max)
lines(puntos$x[order(puntos$x)], smoothed_values[order(puntos$x)], col = "blue", lwd = 2)
smoothed_values
plot(max$x,max$y)
smoothed_values <- predict(fit_max,
data.frame(x=seq(1,10,length.out=100)))
data.frame(x=seq(1,10,length.out=100))
fit_max
plot(smoothed_values)
plot(smoothed_values,type="l")
x_seq <- seq(min(max$x), max(max$x), length.out = 200)
smoothed_values <- predict(fit_max,
data.frame(x=x_seq))
smoothed_values
fit_max
